#!/usr/bin/env python3
"""
Script de Valida√ß√£o P√≥s-Migra√ß√£o
Valida se todas as migra√ß√µes foram aplicadas corretamente
"""

import requests
import json
import os
import psycopg2
from datetime import datetime

def validate_database_schema():
    """Valida o schema do banco de dados"""
    
    print("üóÑÔ∏è VALIDA√á√ÉO DE SCHEMA")
    print("=" * 40)
    
    database_url = os.getenv('DATABASE_URL')
    if not database_url:
        print("‚ùå DATABASE_URL n√£o encontrada!")
        return False
    
    try:
        conn = psycopg2.connect(database_url)
        cursor = conn.cursor()
        
        # Verificar tabela alerts
        cursor.execute("""
            SELECT column_name, data_type, is_nullable 
            FROM information_schema.columns 
            WHERE table_name = 'alerts' 
            ORDER BY column_name;
        """)
        columns = cursor.fetchall()
        
        if not columns:
            print("‚ùå Tabela 'alerts' n√£o encontrada!")
            return False
        
        print(f"‚úÖ Tabela 'alerts' encontrada com {len(columns)} colunas")
        
        # Colunas essenciais que devem existir
        essential_columns = [
            'action_text', 'action_url', 'read_at', 'dismissed_at', 
            'scheduled_for', 'expires_at', 'delivery_channels'
        ]
        
        existing_column_names = [col[0] for col in columns]
        missing_essential = [col for col in essential_columns if col not in existing_column_names]
        
        if missing_essential:
            print(f"‚ùå Colunas essenciais faltantes: {missing_essential}")
            return False
        else:
            print("‚úÖ Todas as colunas essenciais est√£o presentes")
        
        # Testar inser√ß√£o b√°sica (rollback)
        cursor.execute("BEGIN;")
        try:
            cursor.execute("""
                INSERT INTO alerts (user_id, type, priority, status, title, message, created_at)
                VALUES (999, 'general', 'low', 'pending', 'Teste', 'Teste migra√ß√£o', NOW())
                RETURNING id;
            """)
            result = cursor.fetchone()
            test_id = result[0] if result else 'unknown'
            cursor.execute("ROLLBACK;")
            print(f"‚úÖ Teste de inser√ß√£o bem-sucedido (ID {test_id}, rolled back)")
        except Exception as e:
            cursor.execute("ROLLBACK;")
            print(f"‚ùå Falha no teste de inser√ß√£o: {e}")
            return False
        
        cursor.close()
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na valida√ß√£o do schema: {e}")
        return False

def validate_api_endpoints():
    """Valida os endpoints da API"""
    
    print("\nüåê VALIDA√á√ÉO DE ENDPOINTS")
    print("=" * 40)
    
    base_url = "https://www.agenteagricola.com"
    
    tests = [
        ("Health Check Geral", "/health", [200]),
        ("API Alerts Health", "/api/alerts/health", [200]),
        ("API Alerts Widget", "/api/alerts/widget", [200, 401]),  # 401 = OK (sem auth)
        ("Home Page", "/", [200]),
        ("API Dashboard Stats", "/api/dashboard/stats", [200, 401])  # 401 = OK (sem auth)
    ]
    
    all_passed = True
    
    for name, endpoint, valid_codes in tests:
        url = f"{base_url}{endpoint}"
        try:
            response = requests.get(url, timeout=10)
            
            if response.status_code in valid_codes:
                print(f"‚úÖ {name}: Status {response.status_code} (OK)")
                
                # Verificar se retorna JSON v√°lido (para APIs)
                if endpoint.startswith("/api") and response.status_code == 200:
                    try:
                        data = response.json()
                        if 'error' in str(data).lower() and 'column' in str(data).lower():
                            print(f"‚ö†Ô∏è  {name}: Poss√≠vel erro de schema - {data}")
                            all_passed = False
                        else:
                            print(f"   Dados v√°lidos recebidos")
                    except:
                        print(f"   Resposta n√£o-JSON (pode ser HTML)")
                        
            else:
                print(f"‚ùå {name}: Status {response.status_code} (esperava {valid_codes})")
                if response.status_code == 500:
                    try:
                        error_data = response.json()
                        print(f"   Erro: {error_data}")
                    except:
                        print(f"   Erro HTML: {response.text[:100]}...")
                all_passed = False
                
        except Exception as e:
            print(f"‚ùå {name}: Erro de conex√£o - {e}")
            all_passed = False
    
    return all_passed

def validate_alert_functionality():
    """Valida funcionalidades espec√≠ficas do sistema de alertas"""
    
    print("\nüö® VALIDA√á√ÉO DE FUNCIONALIDADE")
    print("=" * 40)
    
    base_url = "https://www.agenteagricola.com"
    
    # Testar endpoint de health espec√≠fico da API de alertas
    try:
        response = requests.get(f"{base_url}/api/alerts/health", timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            
            # Verificar campos esperados
            expected_fields = ['status', 'data', 'timestamp']
            missing_fields = [field for field in expected_fields if field not in data]
            
            if missing_fields:
                print(f"‚ùå Campos faltantes na resposta: {missing_fields}")
                return False
            
            # Verificar dados internos
            if 'data' in data:
                data_fields = data['data']
                expected_data_fields = ['total_alerts', 'available_types', 'available_priorities']
                missing_data = [field for field in expected_data_fields if field not in data_fields]
                
                if missing_data:
                    print(f"‚ùå Dados faltantes: {missing_data}")
                    return False
                else:
                    print(f"‚úÖ API de alertas funcionando completamente")
                    print(f"   Total de alertas: {data_fields.get('total_alerts', 0)}")
                    print(f"   Tipos dispon√≠veis: {len(data_fields.get('available_types', []))}")
                    print(f"   Prioridades: {len(data_fields.get('available_priorities', []))}")
                    return True
            
        else:
            print(f"‚ùå Health check falhou: Status {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao validar funcionalidade: {e}")
        return False

def generate_validation_report():
    """Gera relat√≥rio completo de valida√ß√£o"""
    
    print("\nüìä GERANDO RELAT√ìRIO DE VALIDA√á√ÉO")
    print("=" * 50)
    
    timestamp = datetime.now().isoformat()
    
    # Executar todas as valida√ß√µes
    schema_valid = validate_database_schema()
    api_valid = validate_api_endpoints()
    functionality_valid = validate_alert_functionality()
    
    # Calcular score geral
    validations = [schema_valid, api_valid, functionality_valid]
    success_count = sum(validations)
    total_count = len(validations)
    success_rate = (success_count / total_count) * 100
    
    # Relat√≥rio final
    print(f"\n{'='*60}")
    print("üìã RELAT√ìRIO FINAL DE VALIDA√á√ÉO")
    print(f"{'='*60}")
    print(f"Timestamp: {timestamp}")
    print(f"URL Produ√ß√£o: https://www.agenteagricola.com")
    print()
    print(f"{'‚úÖ' if schema_valid else '‚ùå'} Valida√ß√£o de Schema: {'PASSOU' if schema_valid else 'FALHOU'}")
    print(f"{'‚úÖ' if api_valid else '‚ùå'} Valida√ß√£o de APIs: {'PASSOU' if api_valid else 'FALHOU'}")
    print(f"{'‚úÖ' if functionality_valid else '‚ùå'} Valida√ß√£o de Funcionalidades: {'PASSOU' if functionality_valid else 'FALHOU'}")
    print()
    print(f"üéØ Taxa de Sucesso: {success_count}/{total_count} ({success_rate:.1f}%)")
    
    if success_rate == 100:
        print("üéâ MIGRA√á√ÉO VALIDADA COM 100% DE SUCESSO!")
        status = "SUCESSO_COMPLETO"
    elif success_rate >= 80:
        print("‚úÖ MIGRA√á√ÉO VALIDADA COM SUCESSO (pequenos ajustes podem ser necess√°rios)")
        status = "SUCESSO_PARCIAL"
    else:
        print("‚ö†Ô∏è MIGRA√á√ÉO REQUER ATEN√á√ÉO - Problemas identificados")
        status = "REQUER_ATENCAO"
    
    # Salvar relat√≥rio em arquivo
    try:
        report_content = f"""# RELAT√ìRIO DE VALIDA√á√ÉO DE MIGRA√á√ÉO

**Timestamp:** {timestamp}
**URL Produ√ß√£o:** https://www.agenteagricola.com
**Status Geral:** {status}

## Resultados

- **Valida√ß√£o de Schema:** {'‚úÖ PASSOU' if schema_valid else '‚ùå FALHOU'}
- **Valida√ß√£o de APIs:** {'‚úÖ PASSOU' if api_valid else '‚ùå FALHOU'} 
- **Valida√ß√£o de Funcionalidades:** {'‚úÖ PASSOU' if functionality_valid else '‚ùå FALHOU'}

**Taxa de Sucesso:** {success_count}/{total_count} ({success_rate:.1f}%)

## Pr√≥ximos Passos

{'‚úÖ Sistema totalmente funcional - nenhuma a√ß√£o necess√°ria' if success_rate == 100 else 'üîß Verificar logs e corrigir problemas identificados'}

---
*Relat√≥rio gerado automaticamente pelo script de valida√ß√£o*
"""
        
        report_filename = f"guias/relatorio_validacao_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
        with open(report_filename, 'w', encoding='utf-8') as f:
            f.write(report_content)
        
        print(f"\nüìÑ Relat√≥rio salvo em: {report_filename}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è N√£o foi poss√≠vel salvar o relat√≥rio: {e}")
    
    return success_rate == 100

if __name__ == "__main__":
    print("üß™ SCRIPT DE VALIDA√á√ÉO P√ìS-MIGRA√á√ÉO")
    print("=" * 50)
    print(f"In√≠cio: {datetime.now().isoformat()}")
    
    success = generate_validation_report()
    
    print(f"\nFim: {datetime.now().isoformat()}")
    exit(0 if success else 1)
