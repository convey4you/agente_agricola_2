#!/usr/bin/env python3
"""
Script de Exemplo - Como Usar os Guias de Migra√ß√£o
Demonstra o uso pr√°tico dos scripts de migra√ß√£o
"""

import subprocess
import sys
import os
from datetime import datetime

def print_header(title):
    """Imprime cabe√ßalho formatado"""
    print("\n" + "="*60)
    print(f"üìã {title}")
    print("="*60)

def run_script(script_path, description):
    """Executa um script e retorna o resultado"""
    print(f"\nüöÄ Executando: {description}")
    print(f"Script: {script_path}")
    print("-" * 40)
    
    try:
        result = subprocess.run([sys.executable, script_path], 
                               capture_output=False, 
                               text=True, 
                               timeout=60)
        return result.returncode == 0
    except subprocess.TimeoutExpired:
        print("‚ùå Script executado por muito tempo (timeout)")
        return False
    except Exception as e:
        print(f"‚ùå Erro ao executar script: {e}")
        return False

def demonstrate_workflow():
    """Demonstra o workflow completo de migra√ß√£o"""
    
    print_header("DEMONSTRA√á√ÉO DE WORKFLOW DE MIGRA√á√ÉO")
    
    print("""
üéØ CEN√ÅRIO DE USO:
Voc√™ precisa atualizar o banco de dados PostgreSQL em produ√ß√£o
ap√≥s adicionar novas colunas ao modelo Alert.

üìã WORKFLOW RECOMENDADO:

1Ô∏è‚É£ DIAGN√ìSTICO - Identifique problemas existentes
2Ô∏è‚É£ MIGRA√á√ÉO - Execute as corre√ß√µes necess√°rias  
3Ô∏è‚É£ VALIDA√á√ÉO - Confirme que tudo est√° funcionando

Vamos executar cada etapa:
""")
    
    input("Pressione ENTER para continuar...")
    
    # Etapa 1: Diagn√≥stico
    print_header("ETAPA 1: DIAGN√ìSTICO")
    print("üîç Identificando problemas no sistema atual...")
    
    diagnostic_success = run_script("guias/migracao-postgres/diagnostic_script.py", "Diagn√≥stico completo")
    
    if not diagnostic_success:
        print("‚ö†Ô∏è Problemas identificados! Continuando com migra√ß√£o...")
    
    input("\nPressione ENTER para prosseguir para a migra√ß√£o...")
    
    # Etapa 2: Migra√ß√£o
    print_header("ETAPA 2: MIGRA√á√ÉO")
    print("üîß Executando corre√ß√µes de schema...")
    
    # Verificar se DATABASE_URL est√° configurada
    if not os.getenv('DATABASE_URL'):
        print("‚ö†Ô∏è DATABASE_URL n√£o configurada!")
        print("üí° Para usar em produ√ß√£o, execute:")
        print("   export DATABASE_URL='postgresql://user:pass@host:port/db'")
        print("   python guias/migracao-postgres/migration_script.py")
        print("\nüìã Para esta demonstra√ß√£o, vamos pular a migra√ß√£o real.")
        migration_success = True  # Simular sucesso
    else:
        migration_success = run_script("guias/migracao-postgres/migration_script.py", "Migra√ß√£o de schema")
    
    input("\nPressione ENTER para prosseguir para a valida√ß√£o...")
    
    # Etapa 3: Valida√ß√£o
    print_header("ETAPA 3: VALIDA√á√ÉO")
    print("‚úÖ Validando se as corre√ß√µes foram aplicadas...")
    
    validation_success = run_script("guias/migracao-postgres/validation_script.py", "Valida√ß√£o p√≥s-migra√ß√£o")
    
    # Resumo final
    print_header("RESUMO FINAL")
    
    steps = [
        ("Diagn√≥stico", diagnostic_success),
        ("Migra√ß√£o", migration_success), 
        ("Valida√ß√£o", validation_success)
    ]
    
    success_count = sum([success for _, success in steps])
    total_steps = len(steps)
    
    for step_name, success in steps:
        status = "‚úÖ SUCESSO" if success else "‚ùå FALHOU"
        print(f"{step_name}: {status}")
    
    print(f"\nüéØ Taxa de Sucesso: {success_count}/{total_steps} ({success_count/total_steps*100:.1f}%)")
    
    if success_count == total_steps:
        print("\nüéâ WORKFLOW COMPLETADO COM SUCESSO!")
        print("‚úÖ Sistema pronto para produ√ß√£o")
    elif success_count >= 2:
        print("\n‚úÖ WORKFLOW PARCIALMENTE COMPLETADO")
        print("üîß Algumas corre√ß√µes podem ser necess√°rias")
    else:
        print("\n‚ö†Ô∏è WORKFLOW REQUER ATEN√á√ÉO")
        print("üö® V√°rias etapas falharam - interven√ß√£o necess√°ria")

def show_individual_commands():
    """Mostra comandos individuais para uso avan√ßado"""
    
    print_header("COMANDOS INDIVIDUAIS")
    
    print("""
üõ†Ô∏è SCRIPTS DISPON√çVEIS:

1Ô∏è‚É£ DIAGN√ìSTICO:
   python guias/migracao-postgres/diagnostic_script.py
   
   ‚úÖ Use quando: Suspeitar de problemas no sistema
   üìã O que faz: Verifica ambiente, banco, APIs e problemas comuns
   
2Ô∏è‚É£ MIGRA√á√ÉO:
   export DATABASE_URL="postgresql://..."
   python guias/migracao-postgres/migration_script.py
   
   ‚úÖ Use quando: Precisar aplicar corre√ß√µes de schema
   üìã O que faz: Adiciona colunas faltantes na tabela alerts
   
3Ô∏è‚É£ VALIDA√á√ÉO:
   python guias/migracao-postgres/validation_script.py
   
   ‚úÖ Use quando: Confirmar que migra√ß√£o foi bem-sucedida
   üìã O que faz: Testa schema, APIs e funcionalidades
   
4Ô∏è‚É£ COMANDOS MANUAIS √öTEIS:

   # Testar conex√£o com banco
   psql $DATABASE_URL -c "SELECT version();"
   
   # Verificar colunas da tabela alerts
   psql $DATABASE_URL -c "SELECT column_name FROM information_schema.columns WHERE table_name = 'alerts';"
   
   # Testar API de alertas
   curl -s https://www.agenteagricola.com/api/alerts/health | jq
   
   # Ver logs do Railway
   railway logs --tail=100
   
   # For√ßar restart
   railway service restart
""")

def main():
    """Fun√ß√£o principal"""
    
    print("üéØ GUIA DE USO - MIGRA√á√ÉO POSTGRESQL PRODU√á√ÉO")
    print("=" * 60)
    print(f"Data: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print("""
üìã OP√á√ïES DISPON√çVEIS:

1. Demonstrar workflow completo (recomendado para iniciantes)
2. Mostrar comandos individuais (para uso avan√ßado)
3. Sair
""")
    
    while True:
        try:
            choice = input("Escolha uma op√ß√£o (1-3): ").strip()
            
            if choice == "1":
                demonstrate_workflow()
                break
            elif choice == "2":
                show_individual_commands()
                break
            elif choice == "3":
                print("üëã At√© logo!")
                break
            else:
                print("‚ùå Op√ß√£o inv√°lida! Digite 1, 2 ou 3.")
                
        except KeyboardInterrupt:
            print("\nüëã Interrompido pelo usu√°rio. At√© logo!")
            break
        except Exception as e:
            print(f"‚ùå Erro: {e}")
            break

if __name__ == "__main__":
    main()
