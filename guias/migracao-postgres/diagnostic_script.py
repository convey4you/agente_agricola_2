#!/usr/bin/env python3
"""
Script de Diagn√≥stico para Problemas de Migra√ß√£o
Execute quando houver problemas durante ou ap√≥s migra√ß√µes
"""

import os
import psycopg2
import requests
import json
from datetime import datetime

def check_environment():
    """Verifica vari√°veis de ambiente essenciais"""
    
    print("üîç VERIFICA√á√ÉO DE AMBIENTE")
    print("=" * 40)
    
    essential_vars = {
        'DATABASE_URL': 'URL de conex√£o com PostgreSQL',
        'FLASK_ENV': 'Ambiente Flask (development/production)',
        'FLASK_CONFIG': 'Configura√ß√£o Flask'
    }
    
    missing_vars = []
    
    for var, description in essential_vars.items():
        value = os.getenv(var)
        if value:
            # Mascarar valores sens√≠veis
            if 'URL' in var or 'PASSWORD' in var:
                display_value = value[:20] + '...' if len(value) > 20 else value
            else:
                display_value = value
            print(f"‚úÖ {var}: {display_value}")
        else:
            print(f"‚ùå {var}: N√ÉO DEFINIDA ({description})")
            missing_vars.append(var)
    
    if missing_vars:
        print(f"\n‚ö†Ô∏è Vari√°veis faltantes: {len(missing_vars)}")
        print("üí° Configure as vari√°veis antes de continuar")
        return False
    else:
        print("‚úÖ Todas as vari√°veis de ambiente est√£o configuradas")
        return True

def check_database_connection():
    """Verifica conectividade com o banco de dados"""
    
    print("\nüóÑÔ∏è VERIFICA√á√ÉO DE BANCO DE DADOS")
    print("=" * 40)
    
    database_url = os.getenv('DATABASE_URL')
    if not database_url:
        print("‚ùå DATABASE_URL n√£o encontrada!")
        return False
    
    try:
        # Testar conex√£o
        conn = psycopg2.connect(database_url)
        cursor = conn.cursor()
        
        # Informa√ß√µes b√°sicas
        cursor.execute("SELECT version();")
        version_result = cursor.fetchone()
        version = version_result[0] if version_result else "Vers√£o n√£o dispon√≠vel"
        print(f"‚úÖ PostgreSQL conectado")
        print(f"   Vers√£o: {version.split(',')[0]}")
        
        # Verificar tabelas existentes
        cursor.execute("""
            SELECT tablename FROM pg_tables 
            WHERE schemaname = 'public' 
            ORDER BY tablename;
        """)
        tables = [row[0] for row in cursor.fetchall()]
        print(f"‚úÖ Tabelas encontradas: {len(tables)}")
        
        critical_tables = ['users', 'alerts', 'cultures']
        missing_tables = [table for table in critical_tables if table not in tables]
        
        if missing_tables:
            print(f"‚ùå Tabelas cr√≠ticas faltantes: {missing_tables}")
        else:
            print("‚úÖ Todas as tabelas cr√≠ticas est√£o presentes")
        
        # Verificar espec√≠ficamente a tabela alerts
        if 'alerts' in tables:
            cursor.execute("""
                SELECT column_name, data_type 
                FROM information_schema.columns 
                WHERE table_name = 'alerts' 
                ORDER BY column_name;
            """)
            alert_columns = cursor.fetchall()
            print(f"‚úÖ Tabela 'alerts' possui {len(alert_columns)} colunas")
            
            # Colunas cr√≠ticas para o funcionamento
            critical_columns = [
                'id', 'user_id', 'type', 'priority', 'status', 'title', 'message',
                'action_text', 'read_at', 'dismissed_at'
            ]
            existing_columns = [col[0] for col in alert_columns]
            missing_critical = [col for col in critical_columns if col not in existing_columns]
            
            if missing_critical:
                print(f"‚ùå Colunas cr√≠ticas faltantes em 'alerts': {missing_critical}")
            else:
                print("‚úÖ Todas as colunas cr√≠ticas est√£o presentes em 'alerts'")
        
        cursor.close()
        conn.close()
        return len(missing_tables) == 0
        
    except Exception as e:
        print(f"‚ùå Erro de conex√£o com banco: {e}")
        return False

def check_api_status():
    """Verifica status das APIs da aplica√ß√£o"""
    
    print("\nüåê VERIFICA√á√ÉO DE APIS")
    print("=" * 40)
    
    base_url = "https://www.agenteagricola.com"
    
    endpoints = [
        ("/health", "Health Check Geral"),
        ("/api/alerts/health", "Health Check Alerts"),
        ("/api/alerts/widget", "Widget de Alertas"),
        ("/api/dashboard/stats", "Stats do Dashboard"),
        ("/", "P√°gina Principal")
    ]
    
    results = []
    
    for endpoint, name in endpoints:
        url = f"{base_url}{endpoint}"
        try:
            response = requests.get(url, timeout=10)
            
            status_ok = response.status_code in [200, 401]  # 401 √© OK para endpoints protegidos
            
            if status_ok:
                print(f"‚úÖ {name}: Status {response.status_code}")
                
                if response.status_code == 200 and endpoint.startswith('/api'):
                    try:
                        data = response.json()
                        # Verificar se h√° erros de coluna (indicativo de problemas de schema)
                        response_text = json.dumps(data).lower()
                        if 'column' in response_text and 'does not exist' in response_text:
                            print(f"‚ùå {name}: Erro de schema detectado!")
                            print(f"   {data}")
                            results.append(False)
                        else:
                            results.append(True)
                    except json.JSONDecodeError:
                        results.append(True)  # HTML v√°lido
                else:
                    results.append(True)
            else:
                print(f"‚ùå {name}: Status {response.status_code}")
                if response.status_code == 500:
                    try:
                        error_data = response.json()
                        print(f"   Erro: {error_data}")
                    except:
                        print(f"   Erro: {response.text[:100]}...")
                results.append(False)
                
        except Exception as e:
            print(f"‚ùå {name}: Erro de conex√£o - {e}")
            results.append(False)
    
    success_rate = (sum(results) / len(results)) * 100 if results else 0
    print(f"\nüìä Taxa de sucesso das APIs: {success_rate:.1f}%")
    
    return success_rate >= 80  # 80% ou mais considerado OK

def diagnose_common_issues():
    """Diagnostica problemas comuns e sugere solu√ß√µes"""
    
    print("\nüîß DIAGN√ìSTICO DE PROBLEMAS COMUNS")
    print("=" * 40)
    
    issues_found = []
    
    # 1. Verificar se h√° erros espec√≠ficos de coluna
    try:
        response = requests.get("https://www.agenteagricola.com/api/alerts/health", timeout=5)
        if response.status_code == 500:
            try:
                error_data = response.json()
                if 'column' in str(error_data).lower() and 'does not exist' in str(error_data).lower():
                    issues_found.append("SCHEMA_ERROR")
                    print("‚ùå Problema identificado: Erro de schema (coluna inexistente)")
                    print("üí° Solu√ß√£o: Execute o script de migra√ß√£o")
                    print("   python guias/migration_script.py")
            except:
                pass
    except:
        pass
    
    # 2. Verificar conectividade geral
    try:
        response = requests.get("https://www.agenteagricola.com/health", timeout=5)
        if response.status_code != 200:
            issues_found.append("CONNECTIVITY_ERROR")
            print("‚ùå Problema identificado: Aplica√ß√£o n√£o responde")
            print("üí° Solu√ß√£o: Verificar status do Railway")
            print("   railway status")
    except:
        issues_found.append("CONNECTIVITY_ERROR")
        print("‚ùå Problema identificado: Aplica√ß√£o inacess√≠vel")
    
    # 3. Verificar banco de dados
    database_url = os.getenv('DATABASE_URL')
    if database_url:
        try:
            conn = psycopg2.connect(database_url)
            cursor = conn.cursor()
            cursor.execute("SELECT 1;")
            cursor.close()
            conn.close()
        except Exception as e:
            issues_found.append("DATABASE_ERROR")
            print("‚ùå Problema identificado: Erro de banco de dados")
            print(f"   Erro: {e}")
            print("üí° Solu√ß√£o: Verificar DATABASE_URL e status do banco")
    
    if not issues_found:
        print("‚úÖ Nenhum problema comum identificado")
        print("üí° Execute valida√ß√£o completa: python guias/validation_script.py")
    
    return len(issues_found) == 0

def generate_diagnostic_report():
    """Gera relat√≥rio completo de diagn√≥stico"""
    
    print("\n" + "="*60)
    print("üìã RELAT√ìRIO DE DIAGN√ìSTICO")
    print("="*60)
    
    timestamp = datetime.now().isoformat()
    
    # Executar todos os diagn√≥sticos
    env_ok = check_environment()
    db_ok = check_database_connection()
    api_ok = check_api_status()
    no_issues = diagnose_common_issues()
    
    # Calcular score geral
    checks = [env_ok, db_ok, api_ok, no_issues]
    success_count = sum(checks)
    total_checks = len(checks)
    health_score = (success_count / total_checks) * 100
    
    print(f"\nüìä RESUMO GERAL")
    print("-" * 30)
    print(f"Timestamp: {timestamp}")
    print(f"Ambiente: {'‚úÖ OK' if env_ok else '‚ùå PROBLEMAS'}")
    print(f"Banco de Dados: {'‚úÖ OK' if db_ok else '‚ùå PROBLEMAS'}")
    print(f"APIs: {'‚úÖ OK' if api_ok else '‚ùå PROBLEMAS'}")
    print(f"Problemas Comuns: {'‚úÖ NENHUM' if no_issues else '‚ùå ENCONTRADOS'}")
    print(f"\nüéØ Score de Sa√∫de: {success_count}/{total_checks} ({health_score:.1f}%)")
    
    # Status final e recomenda√ß√µes
    if health_score == 100:
        print("\nüéâ SISTEMA TOTALMENTE SAUD√ÅVEL")
        print("‚úÖ Nenhuma a√ß√£o necess√°ria")
        status = "SAUDAVEL"
    elif health_score >= 75:
        print("\n‚úÖ SISTEMA FUNCIONAL COM PEQUENOS PROBLEMAS")
        print("üîß Problemas menores identificados - corre√ß√£o recomendada")
        status = "FUNCIONAL"
    elif health_score >= 50:
        print("\n‚ö†Ô∏è SISTEMA COM PROBLEMAS SIGNIFICATIVOS")
        print("üö® A√ß√£o imediata recomendada")
        status = "PROBLEMAS"
    else:
        print("\n‚ùå SISTEMA COM PROBLEMAS CR√çTICOS")
        print("üÜò Interven√ß√£o urgente necess√°ria")
        status = "CRITICO"
    
    # Salvar relat√≥rio
    try:
        report_content = f"""# RELAT√ìRIO DE DIAGN√ìSTICO

**Timestamp:** {timestamp}
**Status Geral:** {status}
**Score de Sa√∫de:** {health_score:.1f}%

## Verifica√ß√µes

- **Ambiente:** {'‚úÖ OK' if env_ok else '‚ùå PROBLEMAS'}
- **Banco de Dados:** {'‚úÖ OK' if db_ok else '‚ùå PROBLEMAS'}
- **APIs:** {'‚úÖ OK' if api_ok else '‚ùå PROBLEMAS'}
- **Problemas Comuns:** {'‚úÖ NENHUM' if no_issues else '‚ùå ENCONTRADOS'}

## Pr√≥ximos Passos Recomendados

{
'‚úÖ Sistema funcionando normalmente' if health_score == 100 
else 'üîß Executar corre√ß√µes baseadas nos problemas identificados acima'
}

### Scripts √öteis

- Migra√ß√£o: `python guias/migration_script.py`
- Valida√ß√£o: `python guias/validation_script.py`
- Diagn√≥stico: `python guias/diagnostic_script.py`

---
*Relat√≥rio gerado automaticamente*
"""
        
        report_filename = f"guias/diagnostico_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
        with open(report_filename, 'w', encoding='utf-8') as f:
            f.write(report_content)
        
        print(f"\nüìÑ Relat√≥rio salvo em: {report_filename}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è N√£o foi poss√≠vel salvar o relat√≥rio: {e}")
    
    return health_score >= 75

if __name__ == "__main__":
    print("üîç SCRIPT DE DIAGN√ìSTICO DE MIGRA√á√ÉO")
    print("=" * 50)
    print(f"In√≠cio: {datetime.now().isoformat()}")
    
    system_healthy = generate_diagnostic_report()
    
    print(f"\nFim: {datetime.now().isoformat()}")
    print(f"Sistema {'saud√°vel' if system_healthy else 'requer aten√ß√£o'}")
    
    exit(0 if system_healthy else 1)
