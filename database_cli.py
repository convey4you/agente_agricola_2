#!/usr/bin/env python3
"""
Script de exemplo para gerenciamento do banco de dados via API
Pode ser usado para automa√ß√£o ou opera√ß√µes em lote
"""
import requests
import json
import sys
import getpass
from datetime import datetime

class DatabaseManagerCLI:
    """Cliente CLI para gerenciamento do banco de dados"""
    
    def __init__(self, base_url="http://localhost:5000"):
        self.base_url = base_url
        self.session = requests.Session()
        self.logged_in = False
    
    def login(self, email=None, password=None):
        """Fazer login na aplica√ß√£o"""
        if not email:
            email = input("Email: ")
        if not password:
            password = getpass.getpass("Senha: ")
        
        try:
            # Primeiro, obter o token CSRF
            response = self.session.get(f"{self.base_url}/auth/login")
            
            # Fazer login
            login_data = {
                'email': email,
                'password': password
            }
            
            response = self.session.post(f"{self.base_url}/auth/login", data=login_data)
            
            if response.status_code == 200:
                self.logged_in = True
                print("‚úÖ Login realizado com sucesso!")
                return True
            else:
                print(f"‚ùå Erro no login: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro na conex√£o: {e}")
            return False
    
    def get_database_info(self):
        """Obter informa√ß√µes do banco de dados"""
        if not self.logged_in:
            print("‚ùå Fa√ßa login primeiro")
            return None
        
        try:
            response = self.session.get(f"{self.base_url}/monitoring/database/info")
            
            if response.status_code == 200:
                data = response.json()
                return data
            else:
                print(f"‚ùå Erro ao obter informa√ß√µes: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå Erro na requisi√ß√£o: {e}")
            return None
    
    def validate_database(self):
        """Validar integridade do banco"""
        if not self.logged_in:
            print("‚ùå Fa√ßa login primeiro")
            return None
        
        try:
            response = self.session.get(f"{self.base_url}/monitoring/database/validate")
            
            if response.status_code == 200:
                data = response.json()
                return data
            else:
                print(f"‚ùå Erro na valida√ß√£o: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå Erro na requisi√ß√£o: {e}")
            return None
    
    def create_backup(self, backup_name=None):
        """Criar backup do banco"""
        if not self.logged_in:
            print("‚ùå Fa√ßa login primeiro")
            return None
        
        try:
            data = {}
            if backup_name:
                data['backup_name'] = backup_name
            
            response = self.session.post(
                f"{self.base_url}/monitoring/database/backup",
                json=data,
                headers={'Content-Type': 'application/json'}
            )
            
            if response.status_code == 200:
                result = response.json()
                return result
            else:
                print(f"‚ùå Erro no backup: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå Erro na requisi√ß√£o: {e}")
            return None
    
    def reset_database(self, create_backup=True):
        """OPERA√á√ÉO CR√çTICA: Reset completo do banco"""
        if not self.logged_in:
            print("‚ùå Fa√ßa login primeiro")
            return None
        
        # Confirma√ß√£o de seguran√ßa
        print("\n" + "="*60)
        print("üö® OPERA√á√ÉO CR√çTICA: RESET COMPLETO DO BANCO DE DADOS")
        print("="*60)
        print("‚ö†Ô∏è  ESTA OPERA√á√ÉO IR√Å:")
        print("   ‚Ä¢ Remover TODAS as tabelas")
        print("   ‚Ä¢ Apagar TODOS os dados")
        print("   ‚Ä¢ Recriar estrutura vazia")
        print("   ‚Ä¢ N√ÉO PODE SER DESFEITA")
        print("="*60)
        
        confirmation = input("\nDigite 'CONFIRMO_RESET_COMPLETO' para continuar: ")
        if confirmation != 'CONFIRMO_RESET_COMPLETO':
            print("‚ùå Opera√ß√£o cancelada")
            return None
        
        final_confirm = input("\nTem certeza absoluta? Digite 'SIM': ")
        if final_confirm != 'SIM':
            print("‚ùå Opera√ß√£o cancelada")
            return None
        
        try:
            data = {
                'confirmation': 'RESET_DATABASE_CONFIRM',
                'create_backup': create_backup
            }
            
            print(f"\n‚è≥ Iniciando reset do banco... (backup: {'sim' if create_backup else 'n√£o'})")
            
            response = self.session.post(
                f"{self.base_url}/monitoring/database/reset",
                json=data,
                headers={'Content-Type': 'application/json'}
            )
            
            if response.status_code == 200:
                result = response.json()
                return result
            else:
                print(f"‚ùå Erro no reset: {response.status_code}")
                try:
                    error_data = response.json()
                    print(f"   Detalhes: {error_data.get('error', 'Erro desconhecido')}")
                except:
                    pass
                return None
                
        except Exception as e:
            print(f"‚ùå Erro na requisi√ß√£o: {e}")
            return None
    
    def sync_schema(self):
        """Sincronizar schema do banco - opera√ß√£o segura"""
        if not self.logged_in:
            print("‚ùå √â necess√°rio fazer login primeiro")
            return
        
        try:
            print("üîÑ Sincronizando schema do banco de dados...")
            print("‚ÑπÔ∏è Opera√ß√£o segura - n√£o remove dados existentes")
            
            # Confirmar opera√ß√£o
            confirm = input("Continuar com a sincroniza√ß√£o? (s/N): ").strip().lower()
            if confirm not in ['s', 'sim', 'y', 'yes']:
                print("‚ùå Opera√ß√£o cancelada")
                return
            
            response = self.session.post(f"{self.base_url}/monitoring/database/sync-schema")
            
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    print("‚úÖ Schema sincronizado com sucesso!")
                    
                    # Mostrar detalhes
                    report = data.get('data', {}).get('report', {})
                    new_tables = report.get('new_tables', [])
                    updated_tables = report.get('updated_tables', [])
                    
                    if new_tables:
                        print(f"üìã Tabelas criadas: {', '.join(new_tables)}")
                    
                    if updated_tables:
                        for table_info in updated_tables:
                            table_name = table_info['table']
                            new_columns = table_info['new_columns']
                            print(f"üîÑ Tabela '{table_name}': adicionados {len(new_columns)} campos ({', '.join(new_columns)})")
                    
                    if not new_tables and not updated_tables:
                        print("‚ÑπÔ∏è Schema j√° estava atualizado - nenhuma altera√ß√£o necess√°ria")
                        
                else:
                    error_msg = data.get('message', 'Erro desconhecido')
                    print(f"‚ùå Erro na sincroniza√ß√£o: {error_msg}")
            else:
                print(f"‚ùå Erro HTTP: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå Erro na sincroniza√ß√£o: {e}")


def main():
    """Fun√ß√£o principal do CLI"""
    if len(sys.argv) < 2:
        print("Uso: python database_cli.py <comando> [op√ß√µes]")
        print("\nComandos dispon√≠veis:")
        print("  info          - Informa√ß√µes do banco")
        print("  validate      - Validar integridade")
        print("  backup        - Criar backup")
        print("  sync          - Sincronizar schema (seguro)")
        print("  reset         - Reset completo (CUIDADO!)")
        print("\nExemplos:")
        print("  python database_cli.py info")
        print("  python database_cli.py sync")
        print("  python database_cli.py backup")
        print("  python database_cli.py reset")
        return
    
    command = sys.argv[1].lower()
    
    # Inicializar cliente
    client = DatabaseManagerCLI()
    
    # Fazer login
    print("üîê Fazendo login...")
    if not client.login(email="admin@agrotech.pt"):
        print("‚ùå Falha no login. Verifique as credenciais.")
        return
    
    # Executar comando
    if command == "info":
        print("\nüìä Obtendo informa√ß√µes do banco...")
        result = client.get_database_info()
        if result:
            print(json.dumps(result, indent=2, ensure_ascii=False))
    
    elif command == "validate":
        print("\nüîç Validando banco de dados...")
        result = client.validate_database()
        if result:
            print(json.dumps(result, indent=2, ensure_ascii=False))
    
    elif command == "backup":
        backup_name = f"cli_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        print(f"\nüíæ Criando backup: {backup_name}...")
        result = client.create_backup(backup_name)
        if result:
            print("‚úÖ Backup criado com sucesso!")
            print(json.dumps(result, indent=2, ensure_ascii=False))
    
    elif command == "sync":
        print("\nüîÑ Sincronizando schema do banco...")
        client.sync_schema()
    
    elif command == "reset":
        print("\nüóëÔ∏è Iniciando reset do banco...")
        result = client.reset_database(create_backup=True)
        if result:
            print("‚úÖ Reset conclu√≠do!")
            print(json.dumps(result, indent=2, ensure_ascii=False))
    
    else:
        print(f"‚ùå Comando desconhecido: {command}")


if __name__ == "__main__":
    main()
