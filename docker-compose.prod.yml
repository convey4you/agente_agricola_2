# docker-compose.prod.yml
version: '3.8'

services:
  # Aplicação principal
  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
      target: production
    container_name: agrotech_app
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://agrotech:${DB_PASSWORD}@db:5432/agrotech_prod
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - IPMA_API_KEY=${IPMA_API_KEY}
    depends_on:
      - db
      - redis
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./static/uploads:/app/static/uploads
    networks:
      - agrotech_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.agrotech.rule=Host(`agrotech.pt`)"
      - "traefik.http.routers.agrotech.tls=true"
      - "traefik.http.routers.agrotech.tls.certresolver=letsencrypt"

  # Banco de dados PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: agrotech_db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=agrotech_prod
      - POSTGRES_USER=agrotech
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=pt_PT.UTF-8 --lc-ctype=pt_PT.UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - agrotech_network
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c log_statement=all
      -c log_min_duration_statement=1000

  # Redis para cache
  redis:
    image: redis:7-alpine
    container_name: agrotech_redis
    restart: unless-stopped
    command: >
      redis-server
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
    volumes:
      - redis_data:/data
    networks:
      - agrotech_network

  # Nginx como proxy reverso
  nginx:
    image: nginx:alpine
    container_name: agrotech_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled
      - ./static:/var/www/static
      - ./ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - agrotech_network

  # Monitoramento com Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: agrotech_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - agrotech_network

  # Grafana para dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: agrotech_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=grafana.agrotech.pt
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=${SMTP_HOST}
      - GF_SMTP_USER=${SMTP_USER}
      - GF_SMTP_PASSWORD=${SMTP_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - agrotech_network

  # Node Exporter para métricas do sistema
  node_exporter:
    image: prom/node-exporter:latest
    container_name: agrotech_node_exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - agrotech_network

  # Backup automatizado
  backup:
    image: postgres:15-alpine
    container_name: agrotech_backup
    restart: "no"
    environment:
      - PGPASSWORD=${DB_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh
    depends_on:
      - db
    networks:
      - agrotech_network
    entrypoint: ["/backup.sh"]

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  agrotech_network:
    driver: bridge
