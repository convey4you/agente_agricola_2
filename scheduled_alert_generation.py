#!/usr/bin/env python3
"""
Script de Agendamento Autom√°tico de Alertas
Para ser executado via cron/agendador de tarefas do sistema operacional

Exemplo de configura√ß√£o no cron (Linux/Mac):
# Executar a cada 30 minutos
*/30 * * * * cd /caminho/para/projeto && python scheduled_alert_generation.py

Exemplo no Windows Task Scheduler:
- Programa: python
- Argumentos: scheduled_alert_generation.py
- Diret√≥rio inicial: C:\caminho\para\projeto
- Trigger: Repetir a cada 30 minutos
"""
import sys
import os
from datetime import datetime
import logging

# Adicionar o diret√≥rio raiz ao path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def setup_logging():
    """Configurar logging para o agendador"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('scheduled_alerts.log'),
            logging.StreamHandler(sys.stdout)
        ]
    )
    return logging.getLogger(__name__)

def run_scheduled_alerts():
    """Executar gera√ß√£o autom√°tica de alertas"""
    logger = setup_logging()
    
    try:
        logger.info("=== INICIANDO GERA√á√ÉO AUTOM√ÅTICA DE ALERTAS ===")
        
        # Importar dentro da fun√ß√£o para evitar problemas de inicializa√ß√£o
        from app import create_app
        from app.services.auto_alert_service import AutoAlertService
        
        # Criar contexto da aplica√ß√£o
        app = create_app()
        
        with app.app_context():
            # Executar servi√ßo de alertas autom√°ticos
            auto_alert_service = AutoAlertService()
            result = auto_alert_service.run_auto_generation()
            
            if result['success']:
                logger.info(f"‚úÖ Gera√ß√£o autom√°tica conclu√≠da com sucesso!")
                logger.info(f"   Usu√°rios processados: {result['users_processed']}")
                logger.info(f"   Alertas gerados: {result['alerts_generated']}")
                
                # Log adicional se houver alertas gerados
                if result['alerts_generated'] > 0:
                    logger.info(f"üîî {result['alerts_generated']} novos alertas dispon√≠veis para os usu√°rios")
                else:
                    logger.info("‚Ñπ Nenhum alerta novo gerado (condi√ß√µes n√£o atendidas)")
                    
            else:
                logger.error(f"‚ùå Erro na gera√ß√£o autom√°tica: {result.get('error', 'Erro desconhecido')}")
                return False
                
        return True
        
    except ImportError as e:
        logger.error(f"‚ùå Erro de importa√ß√£o: {str(e)}")
        logger.error("Verifique se est√° executando do diret√≥rio correto e se as depend√™ncias est√£o instaladas")
        return False
        
    except Exception as e:
        logger.error(f"‚ùå Erro inesperado na gera√ß√£o autom√°tica: {str(e)}")
        logger.exception("Detalhes do erro:")
        return False

def check_system_health():
    """Verificar se o sistema est√° funcionando antes de gerar alertas"""
    try:
        from app import create_app
        from app.models.alerts import UserAlertPreference
        
        app = create_app()
        with app.app_context():
            # Verificar se consegue acessar o banco
            count = UserAlertPreference.query.filter_by(auto_generation_enabled=True).count()
            return True, f"{count} usu√°rios com gera√ß√£o autom√°tica habilitada"
            
    except Exception as e:
        return False, f"Erro no health check: {str(e)}"

def main():
    """Fun√ß√£o principal do agendador"""
    logger = setup_logging()
    
    logger.info(f"Iniciando verifica√ß√£o de sa√∫de do sistema...")
    
    # Verificar sa√∫de do sistema
    healthy, message = check_system_health()
    if not healthy:
        logger.error(f"‚ùå Sistema n√£o est√° saud√°vel: {message}")
        sys.exit(1)
    
    logger.info(f"‚úÖ Sistema saud√°vel: {message}")
    
    # Executar gera√ß√£o autom√°tica
    success = run_scheduled_alerts()
    
    if success:
        logger.info("=== GERA√á√ÉO AUTOM√ÅTICA FINALIZADA COM SUCESSO ===")
        sys.exit(0)
    else:
        logger.error("=== GERA√á√ÉO AUTOM√ÅTICA FINALIZADA COM ERRO ===")
        sys.exit(1)

if __name__ == "__main__":
    main()
