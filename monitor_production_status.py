#!/usr/bin/env python3
"""
Monitor de Status de Produ√ß√£o - Railway
Verifica se as corre√ß√µes de schema foram aplicadas com sucesso
"""
import requests
import json
from datetime import datetime
import os

def test_production_endpoints():
    """Testa endpoints cr√≠ticos da aplica√ß√£o em produ√ß√£o"""
    
    # URLs de teste (tentativas baseadas no padr√£o Railway)
    possible_urls = [
        "https://agente-agricola.up.railway.app",
        "https://agente-agricola-fresh.up.railway.app", 
        "https://web-production-6f4a.up.railway.app",
        "https://web-production-0d59.up.railway.app"
    ]
    
    print("üîç AN√ÅLISE DE STATUS DA APLICA√á√ÉO RAILWAY")
    print("=" * 60)
    print(f"‚è∞ Timestamp: {datetime.now().isoformat()}")
    print()
    
    working_url = None
    
    # Encontrar URL que funciona
    for url in possible_urls:
        print(f"üåê Testando: {url}")
        try:
            response = requests.get(f"{url}/health", timeout=10)
            if response.status_code == 200:
                working_url = url
                print(f"‚úÖ URL encontrada: {url}")
                break
            else:
                print(f"‚ùå Status: {response.status_code}")
        except Exception as e:
            print(f"‚ùå Erro: {e}")
    
    if not working_url:
        print("\n‚ùå NENHUMA URL RESPONDENDO")
        print("üîß Poss√≠veis causas:")
        print("   - Aplica√ß√£o n√£o iniciada no Railway")
        print("   - URL mudou")
        print("   - Erro cr√≠tico impedindo inicializa√ß√£o")
        return False
    
    print(f"\n‚úÖ APLICA√á√ÉO ENCONTRADA: {working_url}")
    print("=" * 60)
    
    # Testar endpoints cr√≠ticos
    endpoints = {
        "Health Check": "/health",
        "Home": "/",
        "API Dashboard": "/api/dashboard/stats", 
        "API Alerts Widget": "/api/alerts/widget",
        "API Alerts Health": "/api/alerts/health"
    }
    
    results = {}
    
    for name, endpoint in endpoints.items():
        url = f"{working_url}{endpoint}"
        print(f"\nüîç Testando {name}: {endpoint}")
        
        try:
            response = requests.get(url, timeout=15)
            status = response.status_code
            
            if status == 200:
                print(f"‚úÖ Status: {status} OK")
                try:
                    data = response.json()
                    if 'error' in data:
                        print(f"‚ö†Ô∏è  Resposta cont√©m erro: {data.get('error')}")
                        results[name] = f"200_with_error: {data.get('error')}"
                    else:
                        print(f"‚úÖ Dados: {json.dumps(data, indent=2)[:200]}...")
                        results[name] = "success"
                except:
                    print(f"‚úÖ Conte√∫do HTML (n√£o JSON)")
                    results[name] = "success_html"
            
            elif status == 401:
                print(f"üîê Status: {status} (Autentica√ß√£o necess√°ria - Normal para endpoints protegidos)")
                results[name] = "auth_required"
            
            elif status == 500:
                print(f"‚ùå Status: {status} (Erro interno - Poss√≠vel problema de schema)")
                try:
                    error_data = response.json()
                    print(f"   Erro: {error_data}")
                    results[name] = f"500_error: {error_data.get('error', 'unknown')}"
                except:
                    print(f"   Erro HTML: {response.text[:200]}...")
                    results[name] = "500_error"
            
            else:
                print(f"‚ö†Ô∏è  Status: {status}")
                results[name] = f"status_{status}"
                
        except Exception as e:
            print(f"‚ùå Erro na requisi√ß√£o: {e}")
            results[name] = f"request_error: {e}"
    
    # Relat√≥rio final
    print("\n" + "=" * 60)
    print("üìä RELAT√ìRIO FINAL")
    print("=" * 60)
    
    success_count = 0
    total_count = len(results)
    
    for endpoint, result in results.items():
        if result in ["success", "success_html", "auth_required"]:
            status_icon = "‚úÖ"
            success_count += 1
        elif "500_error" in result:
            status_icon = "‚ùå"
        else:
            status_icon = "‚ö†Ô∏è"
            
        print(f"{status_icon} {endpoint}: {result}")
    
    print(f"\nüìà Taxa de Sucesso: {success_count}/{total_count} ({success_count/total_count*100:.1f}%)")
    
    # An√°lise espec√≠fica da API de alertas
    if "API Alerts Widget" in results:
        alert_result = results["API Alerts Widget"]
        if "500_error" in alert_result:
            print("\nüö® PROBLEMA IDENTIFICADO: API de Alertas com erro 500")
            print("üîß Poss√≠veis causas:")
            print("   - Colunas ainda n√£o criadas na tabela alerts")
            print("   - Aplica√ß√£o n√£o reiniciou ap√≥s deploy")
            print("   - Erro no c√≥digo Python do modelo Alert")
            print("\nüí° RECOMENDA√á√ïES:")
            print("   1. Aguardar mais 5-10 minutos para restart autom√°tico")
            print("   2. Verificar logs do Railway para erros espec√≠ficos")
            print("   3. For√ßar restart manual se necess√°rio")
        elif alert_result == "auth_required":
            print("\n‚úÖ API de Alertas respondendo corretamente (401 = sem autentica√ß√£o)")
            print("üéØ Schema provavelmente corrigido com sucesso!")
    
    return working_url

if __name__ == "__main__":
    test_production_endpoints()
