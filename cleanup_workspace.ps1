# üßπ SCRIPT DE LIMPEZA AUTOMATIZADA DO WORKSPACE AGROTECH
# Vers√£o: 1.0 | Data: 06 de Agosto de 2025
# Execute este script com cuidado e teste ap√≥s cada se√ß√£o

param(
    [switch]$DryRun,           # Apenas simula, n√£o remove arquivos
    [switch]$SkipBackup,       # Pula a cria√ß√£o de backup
    [switch]$Verbose           # Exibe mais detalhes
)

# Configura√ß√µes
$ErrorActionPreference = "Continue"
$startTime = Get-Date
$backupDir = "cleanup_backup_$(Get-Date -Format 'yyyyMMdd_HHmmss')"

# Contadores para estat√≠sticas
$stats = @{
    TestFiles = 0
    TempFiles = 0
    ReportFiles = 0
    ObsoleteScripts = 0
    CacheDirectories = 0
    TotalFilesRemoved = 0
    TotalSizeFreed = 0
}

Write-Host "üßπ INICIANDO LIMPEZA AUTOMATIZADA DO WORKSPACE AGROTECH" -ForegroundColor Green
Write-Host "üìÖ Data/Hora: $(Get-Date -Format 'dd/MM/yyyy HH:mm:ss')" -ForegroundColor Cyan
Write-Host "üìÅ Diret√≥rio: $(Get-Location)" -ForegroundColor Cyan

if ($DryRun) {
    Write-Host "üîç MODO SIMULA√á√ÉO ATIVO - Nenhum arquivo ser√° removido!" -ForegroundColor Yellow
}

# ============================================
# FASE 1: BACKUP DE SEGURAN√áA
# ============================================

if (-not $SkipBackup -and -not $DryRun) {
    Write-Host "`nüì¶ FASE 1: Criando backup de seguran√ßa..." -ForegroundColor Yellow
    
    try {
        New-Item -Path $backupDir -ItemType Directory -Force | Out-Null
        Write-Host "   ‚úÖ Diret√≥rio de backup criado: $backupDir" -ForegroundColor Green
        
        # Backup de arquivos cr√≠ticos que ser√£o removidos
        $criticalFiles = @(
            "config.py.backup",
            "execute_critical_sql*.py",
            "migrate_*.py"
        )
        
        foreach ($pattern in $criticalFiles) {
            $files = Get-ChildItem -Path . -Name $pattern -ErrorAction SilentlyContinue
            foreach ($file in $files) {
                Copy-Item -Path $file -Destination $backupDir -ErrorAction SilentlyContinue
                if ($Verbose) { Write-Host "      üìã Backup: $file" -ForegroundColor Gray }
            }
        }
        
        Write-Host "   ‚úÖ Backup de seguran√ßa conclu√≠do" -ForegroundColor Green
    }
    catch {
        Write-Host "   ‚ùå Erro ao criar backup: $_" -ForegroundColor Red
        Write-Host "   üõë Abortando limpeza por seguran√ßa..." -ForegroundColor Red
        exit 1
    }
}

# ============================================
# FASE 2: REMOVER ARQUIVOS DE TESTE
# ============================================

Write-Host "`nüß™ FASE 2: Removendo arquivos de teste..." -ForegroundColor Yellow

# Localizar todos os arquivos de teste
$testFiles = Get-ChildItem -Path . -Recurse -Name "test_*.py" -ErrorAction SilentlyContinue
$testHtmlFiles = Get-ChildItem -Path . -Name "test_*.html" -ErrorAction SilentlyContinue

$totalTestFiles = $testFiles.Count + $testHtmlFiles.Count
Write-Host "   üìä Encontrados $totalTestFiles arquivos de teste" -ForegroundColor Cyan

if ($testFiles.Count -gt 0) {
    foreach ($file in $testFiles) {
        $filePath = $file
        $fileSize = (Get-Item $filePath -ErrorAction SilentlyContinue).Length
        
        if ($DryRun) {
            Write-Host "   [SIMULA√á√ÉO] Removeria: $file" -ForegroundColor Gray
        } else {
            try {
                Remove-Item -Path $filePath -Force -ErrorAction SilentlyContinue
                $stats.TestFiles++
                $stats.TotalSizeFreed += $fileSize
                if ($Verbose) { Write-Host "      ‚úÖ Removido: $file" -ForegroundColor Green }
            }
            catch {
                Write-Host "      ‚ö†Ô∏è Erro ao remover: $file" -ForegroundColor Yellow
            }
        }
    }
}

if ($testHtmlFiles.Count -gt 0) {
    foreach ($file in $testHtmlFiles) {
        if ($DryRun) {
            Write-Host "   [SIMULA√á√ÉO] Removeria HTML: $file" -ForegroundColor Gray
        } else {
            Remove-Item -Path $file -Force -ErrorAction SilentlyContinue
            $stats.TestFiles++
        }
    }
}

Write-Host "   ‚úÖ Arquivos de teste processados: $($stats.TestFiles)" -ForegroundColor Green

# ============================================
# FASE 3: REMOVER ARQUIVOS TEMPOR√ÅRIOS
# ============================================

Write-Host "`nüìÑ FASE 3: Removendo arquivos tempor√°rios..." -ForegroundColor Yellow

$tempPatterns = @(
    "temp_*.html",
    "temp_*.py",
    "*.tmp",
    "cookies.txt",
    "cookies_test.txt"
)

foreach ($pattern in $tempPatterns) {
    $tempFiles = Get-ChildItem -Path . -Name $pattern -ErrorAction SilentlyContinue
    foreach ($file in $tempFiles) {
        if ($DryRun) {
            Write-Host "   [SIMULA√á√ÉO] Removeria temp: $file" -ForegroundColor Gray
        } else {
            Remove-Item -Path $file -Force -ErrorAction SilentlyContinue
            $stats.TempFiles++
            if ($Verbose) { Write-Host "      ‚úÖ Removido temp: $file" -ForegroundColor Green }
        }
    }
}

Write-Host "   ‚úÖ Arquivos tempor√°rios removidos: $($stats.TempFiles)" -ForegroundColor Green

# ============================================
# FASE 4: REMOVER RELAT√ìRIOS ANTIGOS
# ============================================

Write-Host "`nüìã FASE 4: Removendo relat√≥rios de valida√ß√£o antigos..." -ForegroundColor Yellow

$reportPatterns = @(
    "validation_report_202508*.json",
    "sprint1_validation_report_*.json",
    "test_report_*.json"
)

foreach ($pattern in $reportPatterns) {
    $reportFiles = Get-ChildItem -Path . -Name $pattern -ErrorAction SilentlyContinue
    foreach ($file in $reportFiles) {
        if ($DryRun) {
            Write-Host "   [SIMULA√á√ÉO] Removeria relat√≥rio: $file" -ForegroundColor Gray
        } else {
            Remove-Item -Path $file -Force -ErrorAction SilentlyContinue
            $stats.ReportFiles++
            if ($Verbose) { Write-Host "      ‚úÖ Removido relat√≥rio: $file" -ForegroundColor Green }
        }
    }
}

Write-Host "   ‚úÖ Relat√≥rios antigos removidos: $($stats.ReportFiles)" -ForegroundColor Green

# ============================================
# FASE 5: LIMPAR DIRET√ìRIOS DE CACHE
# ============================================

Write-Host "`nüíæ FASE 5: Limpando diret√≥rios de cache..." -ForegroundColor Yellow

$cacheDirs = @(
    "__pycache__",
    ".pytest_cache", 
    "htmlcov"
)

foreach ($dir in $cacheDirs) {
    if (Test-Path $dir) {
        if ($DryRun) {
            Write-Host "   [SIMULA√á√ÉO] Removeria diret√≥rio: $dir" -ForegroundColor Gray
        } else {
            try {
                Remove-Item -Path $dir -Recurse -Force -ErrorAction SilentlyContinue
                $stats.CacheDirectories++
                Write-Host "      ‚úÖ Removido cache: $dir" -ForegroundColor Green
            }
            catch {
                Write-Host "      ‚ö†Ô∏è Erro ao remover cache: $dir" -ForegroundColor Yellow
            }
        }
    }
}

Write-Host "   ‚úÖ Diret√≥rios de cache limpos: $($stats.CacheDirectories)" -ForegroundColor Green

# ============================================
# FASE 6: REMOVER SCRIPTS OBSOLETOS
# ============================================

Write-Host "`nüîß FASE 6: Removendo scripts obsoletos..." -ForegroundColor Yellow

$obsoleteScripts = @(
    "migrate_add_interesses.py",
    "migrate_production_alerts.py", 
    "migration_add_interesses_column.py",
    "fix_alerts_columns.py",
    "fix_datetime_warnings.py",
    "execute_critical_sql_compatible.py",
    "execute_critical_sql_flask.py",
    "analyze_sqlite.py",
    "check_culture_model.py",
    "check_interests_database.py", 
    "check_railway_deploy.py",
    "debug_buscar_cultura.py",
    "railway_migration_fix.py",
    "verificar_banco.py",
    "verificar_base.py"
)

foreach ($script in $obsoleteScripts) {
    if (Test-Path $script) {
        if ($DryRun) {
            Write-Host "   [SIMULA√á√ÉO] Removeria script: $script" -ForegroundColor Gray
        } else {
            # Fazer backup antes de remover
            if (-not $SkipBackup) {
                Copy-Item -Path $script -Destination $backupDir -ErrorAction SilentlyContinue
            }
            
            Remove-Item -Path $script -Force -ErrorAction SilentlyContinue
            $stats.ObsoleteScripts++
            Write-Host "      ‚úÖ Removido script: $script" -ForegroundColor Green
        }
    } else {
        if ($Verbose) { Write-Host "      ‚ÑπÔ∏è N√£o encontrado: $script" -ForegroundColor Gray }
    }
}

Write-Host "   ‚úÖ Scripts obsoletos removidos: $($stats.ObsoleteScripts)" -ForegroundColor Green

# ============================================
# FASE 7: REMOVER BANCOS SQLITE OBSOLETOS
# ============================================

Write-Host "`nüóÑÔ∏è FASE 7: Removendo bancos SQLite obsoletos..." -ForegroundColor Yellow

$sqliteFiles = @(
    "culturas_agricolas.db"
    # Mantemos agente_agricola.db para desenvolvimento local se necess√°rio
)

foreach ($db in $sqliteFiles) {
    if (Test-Path $db) {
        if ($DryRun) {
            Write-Host "   [SIMULA√á√ÉO] Removeria banco: $db" -ForegroundColor Gray
        } else {
            Remove-Item -Path $db -Force -ErrorAction SilentlyContinue
            Write-Host "      ‚úÖ Removido banco: $db" -ForegroundColor Green
        }
    }
}

# ============================================
# RELAT√ìRIO FINAL
# ============================================

$endTime = Get-Date
$duration = $endTime - $startTime
$stats.TotalFilesRemoved = $stats.TestFiles + $stats.TempFiles + $stats.ReportFiles + $stats.ObsoleteScripts

Write-Host "`nüéâ LIMPEZA CONCLU√çDA!" -ForegroundColor Green
Write-Host "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" -ForegroundColor Cyan

Write-Host "`nüìä ESTAT√çSTICAS:" -ForegroundColor Yellow
Write-Host "   üìÅ Arquivos de teste removidos: $($stats.TestFiles)" -ForegroundColor White
Write-Host "   üóÇÔ∏è Arquivos tempor√°rios removidos: $($stats.TempFiles)" -ForegroundColor White  
Write-Host "   üìã Relat√≥rios antigos removidos: $($stats.ReportFiles)" -ForegroundColor White
Write-Host "   üîß Scripts obsoletos removidos: $($stats.ObsoleteScripts)" -ForegroundColor White
Write-Host "   üíæ Diret√≥rios de cache limpos: $($stats.CacheDirectories)" -ForegroundColor White
Write-Host "   üìä TOTAL DE ARQUIVOS: $($stats.TotalFilesRemoved)" -ForegroundColor Cyan

if ($stats.TotalSizeFreed -gt 0) {
    $sizeFreedMB = [math]::Round($stats.TotalSizeFreed / 1MB, 2)
    Write-Host "   üíΩ Espa√ßo liberado: $sizeFreedMB MB" -ForegroundColor Cyan
}

Write-Host "`n‚è±Ô∏è TEMPO DE EXECU√á√ÉO:" -ForegroundColor Yellow
Write-Host "   üïê Dura√ß√£o: $($duration.Minutes)m $($duration.Seconds)s" -ForegroundColor White

if (-not $DryRun -and -not $SkipBackup) {
    Write-Host "`nüì¶ BACKUP:" -ForegroundColor Yellow
    Write-Host "   üìÅ Backup salvo em: $backupDir" -ForegroundColor White
    Write-Host "   ‚ÑπÔ∏è Mantenha este backup at√© confirmar que tudo est√° funcionando" -ForegroundColor Gray
}

Write-Host "`nüîç PR√ìXIMOS PASSOS:" -ForegroundColor Yellow
Write-Host "   1. ‚úÖ Testar a aplica√ß√£o: python run.py" -ForegroundColor White
Write-Host "   2. ‚úÖ Verificar funcionalidades cr√≠ticas" -ForegroundColor White
Write-Host "   3. ‚úÖ Fazer commit das mudan√ßas se tudo estiver OK" -ForegroundColor White
Write-Host "   4. ‚úÖ Deploy teste no Railway" -ForegroundColor White

if ($DryRun) {
    Write-Host "`nüîÑ Para executar de verdade, rode sem o par√¢metro -DryRun" -ForegroundColor Yellow
}

Write-Host "`n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" -ForegroundColor Cyan
Write-Host "üéØ WORKSPACE LIMPO E ORGANIZADO!" -ForegroundColor Green
