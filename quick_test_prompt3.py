# quick_test_prompt3.py
"""
Teste r√°pido para validar PROMPT 3 - Monitoriza√ß√£o de Performance
"""
import sys
import os
sys.path.insert(0, os.path.abspath('.'))

def quick_test():
    print("üöÄ TESTE R√ÅPIDO - SPRINT 4 PROMPT 3")
    print("=" * 50)
    
    tests_passed = 0
    total_tests = 5
    
    # 1. Testar imports b√°sicos
    try:
        from app.utils.performance_monitoring import PerformanceMonitor, PerformanceMetric
        print("‚úÖ 1. Imports b√°sicos: OK")
        tests_passed += 1
    except Exception as e:
        print(f"‚ùå 1. Imports b√°sicos: {e}")
    
    # 2. Testar cria√ß√£o do monitor
    try:
        monitor = PerformanceMonitor()
        assert monitor.enabled == True
        print("‚úÖ 2. Cria√ß√£o do monitor: OK")
        tests_passed += 1
    except Exception as e:
        print(f"‚ùå 2. Cria√ß√£o do monitor: {e}")
    
    # 3. Testar adi√ß√£o de m√©trica
    try:
        monitor = PerformanceMonitor()
        monitor.add_metric('test', 50.0, '%')
        assert len(monitor.metrics) == 1
        print("‚úÖ 3. Adi√ß√£o de m√©trica: OK")
        tests_passed += 1
    except Exception as e:
        print(f"‚ùå 3. Adi√ß√£o de m√©trica: {e}")
    
    # 4. Testar controlador
    try:
        from app.controllers.performance_monitoring_controller import performance_monitoring_bp
        assert performance_monitoring_bp.name == 'performance_monitoring'
        print("‚úÖ 4. Controlador: OK")
        tests_passed += 1
    except Exception as e:
        print(f"‚ùå 4. Controlador: {e}")
    
    # 5. Testar psutil
    try:
        import psutil
        cpu = psutil.cpu_percent(interval=0.1)
        assert isinstance(cpu, (int, float))
        print("‚úÖ 5. Psutil funcionando: OK")
        tests_passed += 1
    except Exception as e:
        print(f"‚ùå 5. Psutil: {e}")
    
    print(f"\nüìä Resultado: {tests_passed}/{total_tests} testes passaram")
    
    if tests_passed == total_tests:
        print("üéâ PROMPT 3 IMPLEMENTADO COM SUCESSO!")
        print("\nüìã Componentes criados:")
        print("‚Ä¢ app/utils/performance_monitoring.py")
        print("‚Ä¢ app/controllers/performance_monitoring_controller.py") 
        print("‚Ä¢ tests/test_sprint4_performance_monitoring.py")
        print("‚Ä¢ Integra√ß√£o com __init__.py")
        print("\n‚úÖ Sistema de monitoriza√ß√£o pronto!")
        return True
    else:
        print("‚ö†Ô∏è Alguns componentes precisam ser verificados")
        return False

if __name__ == "__main__":
    success = quick_test()
    sys.exit(0 if success else 1)
