"""
Sistema de Onboarding Avan√ßado - AgroTech Portugal
Sistema completo de introdu√ß√£o e engajamento de novos usu√°rios
"""

import json
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass, asdict
from enum import Enum
from flask import current_app, session, request, url_for
import logging

logger = logging.getLogger(__name__)

class OnboardingStepType(Enum):
    """Tipos de etapas do onboarding"""
    WELCOME = "welcome"
    PROFILE_SETUP = "profile_setup"
    TUTORIAL = "tutorial"
    FEATURE_INTRODUCTION = "feature_introduction"
    INTERACTIVE_DEMO = "interactive_demo"
    GOAL_SETTING = "goal_setting"
    COMPLETION = "completion"

class OnboardingStatus(Enum):
    """Status das etapas do onboarding"""
    NOT_STARTED = "not_started"
    IN_PROGRESS = "in_progress"
    COMPLETED = "completed"
    SKIPPED = "skipped"

@dataclass
class OnboardingStep:
    """Etapa do onboarding"""
    id: str
    title: str
    description: str
    type: OnboardingStepType
    content: Dict[str, Any]
    order: int
    required: bool = True
    estimated_time: int = 5  # minutos
    prerequisites: List[str] = None
    completion_criteria: Dict[str, Any] = None
    
    def __post_init__(self):
        if self.prerequisites is None:
            self.prerequisites = []
        if self.completion_criteria is None:
            self.completion_criteria = {}

@dataclass
class UserOnboardingProgress:
    """Progresso do usu√°rio no onboarding"""
    user_id: int
    started_at: datetime
    current_step: str
    completed_steps: List[str]
    skipped_steps: List[str]
    progress_percentage: float
    estimated_completion_time: int
    personalization_data: Dict[str, Any]
    last_activity: datetime
    
    def __post_init__(self):
        if self.completed_steps is None:
            self.completed_steps = []
        if self.skipped_steps is None:
            self.skipped_steps = []
        if self.personalization_data is None:
            self.personalization_data = {}

class OnboardingEngine:
    """Motor do sistema de onboarding"""
    
    def __init__(self):
        self.steps = self._initialize_steps()
        self.user_progress = {}
    
    def _initialize_steps(self) -> Dict[str, OnboardingStep]:
        """Inicializar etapas do onboarding"""
        steps = {
            "welcome": OnboardingStep(
                id="welcome",
                title="Bem-vindo ao AgroTech Portugal",
                description="Descubra como nossa plataforma pode revolucionar sua atividade agr√≠cola",
                type=OnboardingStepType.WELCOME,
                order=1,
                content={
                    "video_url": "/static/videos/welcome.mp4",
                    "highlights": [
                        "Gest√£o inteligente de culturas",
                        "Monitoramento clim√°tico em tempo real",
                        "Marketplace especializado",
                        "Assistente IA personalizado"
                    ],
                    "cta_text": "Vamos come√ßar!"
                },
                estimated_time=3
            ),
            
            "profile_setup": OnboardingStep(
                id="profile_setup",
                title="Configure seu Perfil",
                description="Personalize sua experi√™ncia baseada no seu tipo de atividade agr√≠cola",
                type=OnboardingStepType.PROFILE_SETUP,
                order=2,
                content={
                    "form_fields": [
                        {
                            "name": "farm_type",
                            "label": "Tipo de Explora√ß√£o",
                            "type": "select",
                            "options": [
                                {"value": "cereais", "label": "Cereais"},
                                {"value": "horticultura", "label": "Horticultura"},
                                {"value": "fruticultura", "label": "Fruticultura"},
                                {"value": "vitivinicultura", "label": "Vitivinicultura"},
                                {"value": "pecuaria", "label": "Pecu√°ria"},
                                {"value": "misto", "label": "Misto"}
                            ],
                            "required": True
                        },
                        {
                            "name": "farm_size",
                            "label": "√Årea da Explora√ß√£o (hectares)",
                            "type": "select",
                            "options": [
                                {"value": "small", "label": "At√© 5 hectares"},
                                {"value": "medium", "label": "5-50 hectares"},
                                {"value": "large", "label": "50-200 hectares"},
                                {"value": "enterprise", "label": "Mais de 200 hectares"}
                            ],
                            "required": True
                        },
                        {
                            "name": "experience_level",
                            "label": "N√≠vel de Experi√™ncia",
                            "type": "select",
                            "options": [
                                {"value": "beginner", "label": "Iniciante"},
                                {"value": "intermediate", "label": "Interm√©dio"},
                                {"value": "advanced", "label": "Avan√ßado"},
                                {"value": "expert", "label": "Especialista"}
                            ],
                            "required": True
                        },
                        {
                            "name": "location",
                            "label": "Localiza√ß√£o",
                            "type": "text",
                            "placeholder": "Ex: Alentejo, Minho, Beira Interior...",
                            "required": True
                        },
                        {
                            "name": "goals",
                            "label": "Principais Objetivos",
                            "type": "checkbox",
                            "options": [
                                {"value": "increase_yield", "label": "Aumentar produtividade"},
                                {"value": "reduce_costs", "label": "Reduzir custos"},
                                {"value": "improve_quality", "label": "Melhorar qualidade"},
                                {"value": "sustainability", "label": "Sustentabilidade"},
                                {"value": "technology", "label": "Adotar tecnologia"},
                                {"value": "market_access", "label": "Acesso a mercados"}
                            ]
                        }
                    ]
                },
                completion_criteria={
                    "required_fields": ["farm_type", "farm_size", "experience_level", "location"]
                },
                estimated_time=5
            ),
            
            "dashboard_tour": OnboardingStep(
                id="dashboard_tour",
                title="Tour pelo Dashboard",
                description="Descubra as principais funcionalidades do seu painel de controlo",
                type=OnboardingStepType.TUTORIAL,
                order=3,
                content={
                    "tour_steps": [
                        {
                            "target": "#weather-widget",
                            "title": "Widget do Clima",
                            "content": "Monitorize as condi√ß√µes meteorol√≥gicas em tempo real para tomar decis√µes informadas."
                        },
                        {
                            "target": "#culture-overview",
                            "title": "Vis√£o Geral das Culturas",
                            "content": "Acompanhe o estado das suas culturas e receba alertas importantes."
                        },
                        {
                            "target": "#quick-actions",
                            "title": "A√ß√µes R√°pidas",
                            "content": "Aceda rapidamente √†s funcionalidades mais utilizadas."
                        },
                        {
                            "target": "#notifications",
                            "title": "Centro de Notifica√ß√µes",
                            "content": "Receba alertas personalizados sobre as suas culturas e atividades."
                        },
                        {
                            "target": "#ai-assistant",
                            "title": "Assistente IA",
                            "content": "Obtenha conselhos personalizados do nosso assistente inteligente."
                        }
                    ]
                },
                estimated_time=8
            ),
            
            "first_culture": OnboardingStep(
                id="first_culture",
                title="Adicione sua Primeira Cultura",
                description="Configure o monitoramento da sua primeira cultura",
                type=OnboardingStepType.INTERACTIVE_DEMO,
                order=4,
                content={
                    "demo_type": "culture_creation",
                    "guided_form": True,
                    "sample_data": {
                        "culture_suggestions": [
                            {"name": "Milho", "icon": "üåΩ", "season": "Primavera"},
                            {"name": "Trigo", "icon": "üåæ", "season": "Outono"},
                            {"name": "Tomate", "icon": "üçÖ", "season": "Ver√£o"},
                            {"name": "Oliveira", "icon": "ü´í", "season": "Todo o ano"}
                        ]
                    },
                    "help_tips": [
                        "Escolha uma cultura adequada √† sua regi√£o e √©poca do ano",
                        "Defina a √°rea cultivada para c√°lculos precisos",
                        "Configure alertas para etapas cr√≠ticas do crescimento"
                    ]
                },
                completion_criteria={
                    "action": "culture_created"
                },
                estimated_time=10
            ),
            
            "weather_setup": OnboardingStep(
                id="weather_setup",
                title="Configure Alertas Meteorol√≥gicos",
                description="Personalize as notifica√ß√µes clim√°ticas para suas culturas",
                type=OnboardingStepType.FEATURE_INTRODUCTION,
                order=5,
                content={
                    "feature_overview": {
                        "title": "Monitoramento Clim√°tico Inteligente",
                        "benefits": [
                            "Previs√µes meteorol√≥gicas precisas",
                            "Alertas de condi√ß√µes adversas",
                            "Recomenda√ß√µes baseadas no clima",
                            "Hist√≥rico clim√°tico detalhado"
                        ]
                    },
                    "configuration_options": [
                        {
                            "name": "frost_alerts",
                            "label": "Alertas de Geada",
                            "description": "Receba notifica√ß√µes quando h√° risco de geada",
                            "default": True
                        },
                        {
                            "name": "rain_alerts",
                            "label": "Alertas de Chuva",
                            "description": "Notifica√ß√µes sobre precipita√ß√£o intensa",
                            "default": True
                        },
                        {
                            "name": "wind_alerts",
                            "label": "Alertas de Vento",
                            "description": "Avisos sobre ventos fortes",
                            "default": False
                        },
                        {
                            "name": "temperature_alerts",
                            "label": "Alertas de Temperatura",
                            "description": "Notifica√ß√µes sobre temperaturas extremas",
                            "default": True
                        }
                    ]
                },
                estimated_time=5
            ),
            
            "marketplace_intro": OnboardingStep(
                id="marketplace_intro",
                title="Explore o Marketplace",
                description="Descubra produtos e servi√ßos especializados para agricultura",
                type=OnboardingStepType.FEATURE_INTRODUCTION,
                order=6,
                content={
                    "feature_overview": {
                        "title": "Marketplace Agr√≠cola",
                        "description": "Conecte-se com fornecedores especializados e encontre os melhores produtos para sua atividade"
                    },
                    "categories_tour": [
                        {
                            "name": "Sementes e Plantas",
                            "icon": "üå±",
                            "description": "Variedades certificadas e adaptadas ao clima portugu√™s"
                        },
                        {
                            "name": "Fertilizantes",
                            "icon": "üß™",
                            "description": "Nutri√ß√£o especializada para cada tipo de cultura"
                        },
                        {
                            "name": "Equipamentos",
                            "icon": "üöú",
                            "description": "Maquinaria e ferramentas para agricultura moderna"
                        },
                        {
                            "name": "Servi√ßos",
                            "icon": "üõ†Ô∏è",
                            "description": "Consultoria, an√°lises e servi√ßos especializados"
                        }
                    ],
                    "demo_search": {
                        "suggested_terms": ["fertilizante milho", "sementes tomate", "an√°lise solo"]
                    }
                },
                estimated_time=7
            ),
            
            "ai_assistant_intro": OnboardingStep(
                id="ai_assistant_intro",
                title="Conhe√ßa seu Assistente IA",
                description="Aprenda a usar o assistente inteligente para otimizar sua produ√ß√£o",
                type=OnboardingStepType.INTERACTIVE_DEMO,
                order=7,
                content={
                    "demo_conversations": [
                        {
                            "question": "Quando devo plantar milho no Alentejo?",
                            "response": "No Alentejo, o milho deve ser plantado entre mar√ßo e maio, quando as temperaturas m√≠nimas est√£o consistentemente acima de 10¬∞C..."
                        },
                        {
                            "question": "Como posso melhorar a qualidade do meu solo?",
                            "response": "Para melhorar a qualidade do solo, recomendo come√ßar com uma an√°lise completa. Com base nos resultados..."
                        }
                    ],
                    "conversation_starters": [
                        "Como cuidar de plantas de tomate?",
                        "Qual a melhor √©poca para podar oliveiras?",
                        "Como prevenir pragas em hortali√ßas?",
                        "Que fertilizante usar para trigo?"
                    ]
                },
                completion_criteria={
                    "action": "ai_question_asked"
                },
                estimated_time=6
            ),
            
            "goal_setting": OnboardingStep(
                id="goal_setting",
                title="Defina seus Objetivos",
                description="Estabele√ßa metas para acompanhar o progresso da sua atividade",
                type=OnboardingStepType.GOAL_SETTING,
                order=8,
                content={
                    "goal_categories": [
                        {
                            "category": "Produtividade",
                            "goals": [
                                {"name": "Aumentar rendimento por hectare", "unit": "%", "target": 15},
                                {"name": "Reduzir perdas p√≥s-colheita", "unit": "%", "target": 10},
                                {"name": "Melhorar qualidade dos produtos", "unit": "score", "target": 85}
                            ]
                        },
                        {
                            "category": "Sustentabilidade",
                            "goals": [
                                {"name": "Reduzir uso de pesticidas", "unit": "%", "target": 20},
                                {"name": "Melhorar efici√™ncia da √°gua", "unit": "%", "target": 25},
                                {"name": "Aumentar biodiversidade", "unit": "score", "target": 80}
                            ]
                        },
                        {
                            "category": "Financeiro",
                            "goals": [
                                {"name": "Reduzir custos de produ√ß√£o", "unit": "%", "target": 12},
                                {"name": "Aumentar margem de lucro", "unit": "%", "target": 18},
                                {"name": "Diversificar fontes de receita", "unit": "count", "target": 3}
                            ]
                        }
                    ]
                },
                estimated_time=8
            ),
            
            "completion": OnboardingStep(
                id="completion",
                title="Parab√©ns! Onboarding Conclu√≠do",
                description="Voc√™ est√° pronto para aproveitar ao m√°ximo o AgroTech Portugal",
                type=OnboardingStepType.COMPLETION,
                order=9,
                content={
                    "celebration": {
                        "animation": "confetti",
                        "message": "Bem-vindo √† fam√≠lia AgroTech Portugal!"
                    },
                    "next_steps": [
                        {
                            "title": "Explore o Dashboard",
                            "description": "Familiarize-se com todas as funcionalidades",
                            "action": "dashboard",
                            "icon": "üìä"
                        },
                        {
                            "title": "Adicione mais Culturas",
                            "description": "Expanda o monitoramento para todas suas atividades",
                            "action": "cultures",
                            "icon": "üå±"
                        },
                        {
                            "title": "Configure Alertas",
                            "description": "Personalize as notifica√ß√µes conforme suas necessidades",
                            "action": "settings",
                            "icon": "üîî"
                        },
                        {
                            "title": "Contacte Suporte",
                            "description": "Nossa equipe est√° sempre dispon√≠vel para ajudar",
                            "action": "support",
                            "icon": "üí¨"
                        }
                    ],
                    "achievement_badge": {
                        "title": "Pioneiro AgroTech",
                        "description": "Completou o onboarding com sucesso",
                        "icon": "üèÜ"
                    },
                    "bonus_content": {
                        "free_consultation": True,
                        "premium_trial": 30,  # dias
                        "welcome_discount": 15  # percentual
                    }
                },
                estimated_time=3
            )
        }
        
        return steps
    
    def start_onboarding(self, user_id: int) -> UserOnboardingProgress:
        """Iniciar onboarding para um usu√°rio"""
        progress = UserOnboardingProgress(
            user_id=user_id,
            started_at=datetime.now(),
            current_step="welcome",
            completed_steps=[],
            skipped_steps=[],
            progress_percentage=0.0,
            estimated_completion_time=self._calculate_total_time(),
            personalization_data={},
            last_activity=datetime.now()
        )
        
        self.user_progress[user_id] = progress
        
        # Registrar evento de analytics
        from .analytics import analytics_tracker
        analytics_tracker.track_event(
            "onboarding_started",
            user_id=user_id,
            properties={
                "estimated_time": progress.estimated_completion_time,
                "first_step": "welcome"
            }
        )
        
        logger.info(f"Onboarding started for user {user_id}")
        return progress
    
    def get_user_progress(self, user_id: int) -> Optional[UserOnboardingProgress]:
        """Obter progresso do usu√°rio"""
        return self.user_progress.get(user_id)
    
    def get_current_step(self, user_id: int) -> Optional[OnboardingStep]:
        """Obter etapa atual do usu√°rio"""
        progress = self.get_user_progress(user_id)
        if not progress:
            return None
        
        return self.steps.get(progress.current_step)
    
    def complete_step(self, user_id: int, step_id: str, data: Dict[str, Any] = None) -> bool:
        """Marcar etapa como conclu√≠da"""
        progress = self.get_user_progress(user_id)
        if not progress or step_id not in self.steps:
            return False
        
        # Verificar se a etapa pode ser conclu√≠da
        step = self.steps[step_id]
        if not self._can_complete_step(progress, step, data):
            return False
        
        # Atualizar progresso
        if step_id not in progress.completed_steps:
            progress.completed_steps.append(step_id)
        
        # Salvar dados de personaliza√ß√£o
        if data:
            progress.personalization_data.update(data)
        
        # Avan√ßar para pr√≥xima etapa
        next_step = self._get_next_step(progress)
        if next_step:
            progress.current_step = next_step.id
        
        # Atualizar percentual de progresso
        progress.progress_percentage = self._calculate_progress_percentage(progress)
        progress.last_activity = datetime.now()
        
        # Registrar evento de analytics
        from .analytics import analytics_tracker
        analytics_tracker.track_event(
            "onboarding_step_completed",
            user_id=user_id,
            properties={
                "step_id": step_id,
                "step_title": step.title,
                "progress_percentage": progress.progress_percentage,
                "time_on_step": self._calculate_step_time(progress, step_id)
            }
        )
        
        # Verificar se onboarding foi conclu√≠do
        if self._is_onboarding_complete(progress):
            self._complete_onboarding(user_id, progress)
        
        logger.info(f"Step {step_id} completed for user {user_id}")
        return True
    
    def skip_step(self, user_id: int, step_id: str) -> bool:
        """Pular etapa"""
        progress = self.get_user_progress(user_id)
        if not progress or step_id not in self.steps:
            return False
        
        step = self.steps[step_id]
        if step.required:
            return False  # N√£o pode pular etapas obrigat√≥rias
        
        # Atualizar progresso
        if step_id not in progress.skipped_steps:
            progress.skipped_steps.append(step_id)
        
        # Avan√ßar para pr√≥xima etapa
        next_step = self._get_next_step(progress)
        if next_step:
            progress.current_step = next_step.id
        
        progress.progress_percentage = self._calculate_progress_percentage(progress)
        progress.last_activity = datetime.now()
        
        # Registrar evento
        from .analytics import analytics_tracker
        analytics_tracker.track_event(
            "onboarding_step_skipped",
            user_id=user_id,
            properties={
                "step_id": step_id,
                "step_title": step.title
            }
        )
        
        logger.info(f"Step {step_id} skipped for user {user_id}")
        return True
    
    def restart_onboarding(self, user_id: int) -> bool:
        """Reiniciar onboarding"""
        if user_id in self.user_progress:
            del self.user_progress[user_id]
        
        self.start_onboarding(user_id)
        
        # Registrar evento
        from .analytics import analytics_tracker
        analytics_tracker.track_event(
            "onboarding_restarted",
            user_id=user_id
        )
        
        return True
    
    def get_personalized_recommendations(self, user_id: int) -> List[Dict[str, Any]]:
        """Obter recomenda√ß√µes personalizadas baseadas no progresso"""
        progress = self.get_user_progress(user_id)
        if not progress:
            return []
        
        recommendations = []
        data = progress.personalization_data
        
        # Recomenda√ß√µes baseadas no tipo de explora√ß√£o
        farm_type = data.get('farm_type')
        if farm_type:
            recommendations.extend(self._get_farm_type_recommendations(farm_type))
        
        # Recomenda√ß√µes baseadas no n√≠vel de experi√™ncia
        experience = data.get('experience_level')
        if experience:
            recommendations.extend(self._get_experience_recommendations(experience))
        
        # Recomenda√ß√µes baseadas nos objetivos
        goals = data.get('goals', [])
        if goals:
            recommendations.extend(self._get_goal_recommendations(goals))
        
        return recommendations[:5]  # Limitar a 5 recomenda√ß√µes
    
    def _calculate_total_time(self) -> int:
        """Calcular tempo total estimado do onboarding"""
        return sum(step.estimated_time for step in self.steps.values())
    
    def _can_complete_step(self, progress: UserOnboardingProgress, 
                          step: OnboardingStep, data: Dict[str, Any]) -> bool:
        """Verificar se uma etapa pode ser conclu√≠da"""
        # Verificar pr√©-requisitos
        for prereq in step.prerequisites:
            if prereq not in progress.completed_steps:
                return False
        
        # Verificar crit√©rios de conclus√£o
        if step.completion_criteria:
            required_fields = step.completion_criteria.get('required_fields', [])
            if required_fields and data:
                for field in required_fields:
                    if field not in data or not data[field]:
                        return False
            
            required_action = step.completion_criteria.get('action')
            if required_action and not data.get('action_completed'):
                return False
        
        return True
    
    def _get_next_step(self, progress: UserOnboardingProgress) -> Optional[OnboardingStep]:
        """Obter pr√≥xima etapa"""
        current_step = self.steps.get(progress.current_step)
        if not current_step:
            return None
        
        # Encontrar pr√≥xima etapa em ordem
        next_order = current_step.order + 1
        for step in self.steps.values():
            if (step.order == next_order and 
                step.id not in progress.completed_steps and 
                step.id not in progress.skipped_steps):
                return step
        
        return None
    
    def _calculate_progress_percentage(self, progress: UserOnboardingProgress) -> float:
        """Calcular percentual de progresso"""
        total_steps = len(self.steps)
        completed_steps = len(progress.completed_steps) + len(progress.skipped_steps)
        return (completed_steps / total_steps) * 100
    
    def _calculate_step_time(self, progress: UserOnboardingProgress, step_id: str) -> int:
        """Calcular tempo gasto numa etapa (mock implementation)"""
        # Em uma implementa√ß√£o real, isso seria calculado baseado nos timestamps
        return 5  # minutos
    
    def _is_onboarding_complete(self, progress: UserOnboardingProgress) -> bool:
        """Verificar se onboarding est√° conclu√≠do"""
        required_steps = [step.id for step in self.steps.values() if step.required]
        completed_required = [step for step in required_steps if step in progress.completed_steps]
        return len(completed_required) == len(required_steps)
    
    def _complete_onboarding(self, user_id: int, progress: UserOnboardingProgress):
        """Finalizar onboarding"""
        progress.current_step = "completion"
        progress.progress_percentage = 100.0
        
        # Registrar conclus√£o
        from .analytics import analytics_tracker
        analytics_tracker.track_event(
            "onboarding_completed",
            user_id=user_id,
            properties={
                "total_time": (datetime.now() - progress.started_at).total_seconds() / 60,
                "steps_completed": len(progress.completed_steps),
                "steps_skipped": len(progress.skipped_steps),
                "completion_rate": progress.progress_percentage
            }
        )
        
        # Ativar benef√≠cios de conclus√£o
        self._activate_completion_benefits(user_id)
        
        logger.info(f"Onboarding completed for user {user_id}")
    
    def _activate_completion_benefits(self, user_id: int):
        """Ativar benef√≠cios de conclus√£o do onboarding"""
        # Implementar ativa√ß√£o de trial premium, desconto, etc.
        pass
    
    def _get_farm_type_recommendations(self, farm_type: str) -> List[Dict[str, Any]]:
        """Recomenda√ß√µes baseadas no tipo de explora√ß√£o"""
        recommendations_map = {
            "cereais": [
                {"title": "Monitoramento de Pragas", "description": "Configure alertas para pragas comuns em cereais"},
                {"title": "An√°lise de Solo", "description": "Fa√ßa an√°lises regulares para otimizar a nutri√ß√£o"}
            ],
            "horticultura": [
                {"title": "Irriga√ß√£o Inteligente", "description": "Otimize o uso da √°gua com sensores de umidade"},
                {"title": "Controle de Estufa", "description": "Monitore temperatura e humidade em tempo real"}
            ],
            "fruticultura": [
                {"title": "Previs√£o de Colheita", "description": "Use IA para prever datas ideais de colheita"},
                {"title": "Controle de Qualidade", "description": "Monitore qualidade dos frutos durante crescimento"}
            ]
        }
        return recommendations_map.get(farm_type, [])
    
    def _get_experience_recommendations(self, experience: str) -> List[Dict[str, Any]]:
        """Recomenda√ß√µes baseadas no n√≠vel de experi√™ncia"""
        recommendations_map = {
            "beginner": [
                {"title": "Guias para Iniciantes", "description": "Acesse conte√∫do educativo personalizado"},
                {"title": "Mentoria Virtual", "description": "Receba orienta√ß√£o do assistente IA"}
            ],
            "intermediate": [
                {"title": "An√°lises Avan√ßadas", "description": "Use relat√≥rios detalhados para otimiza√ß√£o"},
                {"title": "Automa√ß√£o", "description": "Configure alertas e a√ß√µes autom√°ticas"}
            ],
            "advanced": [
                {"title": "API Integration", "description": "Conecte com seus sistemas existentes"},
                {"title": "Analytics Customizado", "description": "Crie dashboards personalizados"}
            ]
        }
        return recommendations_map.get(experience, [])
    
    def _get_goal_recommendations(self, goals: List[str]) -> List[Dict[str, Any]]:
        """Recomenda√ß√µes baseadas nos objetivos"""
        recommendations = []
        
        if "increase_yield" in goals:
            recommendations.append({
                "title": "Otimiza√ß√£o de Produtividade",
                "description": "Use analytics para identificar oportunidades de melhoria"
            })
        
        if "sustainability" in goals:
            recommendations.append({
                "title": "Agricultura Sustent√°vel", 
                "description": "Monitore m√©tricas ambientais e reduza impacto"
            })
        
        if "technology" in goals:
            recommendations.append({
                "title": "Inova√ß√£o Tecnol√≥gica",
                "description": "Explore funcionalidades avan√ßadas da plataforma"
            })
        
        return recommendations

# Inst√¢ncia global
onboarding_engine = OnboardingEngine()
